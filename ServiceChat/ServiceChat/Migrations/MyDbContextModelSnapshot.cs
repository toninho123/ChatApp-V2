// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceChat.Data;

namespace ServiceChat.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("ServiceChat.Model.Chat_Grupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Capa")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dt_Criado")
                        .HasColumnType("datetime");

                    b.Property<int>("Id_Curso")
                        .HasColumnType("int");

                    b.Property<int>("Id_Entidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id_Curso");

                    b.HasIndex("Id_Entidade");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Membros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Administrador")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Dt_Criado")
                        .HasColumnType("datetime");

                    b.Property<int>("Id_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("Id_Utilizador")
                        .HasColumnType("int");

                    b.Property<bool>("Lido")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Saiu")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id_Grupo");

                    b.HasIndex("Id_Utilizador");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Mensagens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Anexo")
                        .HasColumnType("text");

                    b.Property<string>("Anexo_Nome")
                        .HasColumnType("text");

                    b.Property<DateTime>("Dt_Criado")
                        .HasColumnType("datetime");

                    b.Property<int>("Id_Grupo")
                        .HasColumnType("int");

                    b.Property<int>("Id_Utilizador")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id_Grupo");

                    b.HasIndex("Id_Utilizador");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("ServiceChat.Model.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("ServiceChat.Model.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("ServiceChat.Model.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Numero_Identificacao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Grupos", b =>
                {
                    b.HasOne("ServiceChat.Model.Curso", "Curso")
                        .WithMany("Sala")
                        .HasForeignKey("Id_Curso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceChat.Model.Empresa", "Empresa")
                        .WithMany("Sala")
                        .HasForeignKey("Id_Entidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Membros", b =>
                {
                    b.HasOne("ServiceChat.Model.Chat_Grupos", "Sala")
                        .WithMany("Grupo")
                        .HasForeignKey("Id_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceChat.Model.Utilizador", "Utilizador")
                        .WithMany("Grupo")
                        .HasForeignKey("Id_Utilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Mensagens", b =>
                {
                    b.HasOne("ServiceChat.Model.Chat_Grupos", "Sala")
                        .WithMany("Mensagem")
                        .HasForeignKey("Id_Grupo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceChat.Model.Utilizador", "Utilizador")
                        .WithMany("Mensagem")
                        .HasForeignKey("Id_Utilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("ServiceChat.Model.Chat_Grupos", b =>
                {
                    b.Navigation("Grupo");

                    b.Navigation("Mensagem");
                });

            modelBuilder.Entity("ServiceChat.Model.Curso", b =>
                {
                    b.Navigation("Sala");
                });

            modelBuilder.Entity("ServiceChat.Model.Empresa", b =>
                {
                    b.Navigation("Sala");
                });

            modelBuilder.Entity("ServiceChat.Model.Utilizador", b =>
                {
                    b.Navigation("Grupo");

                    b.Navigation("Mensagem");
                });
#pragma warning restore 612, 618
        }
    }
}
